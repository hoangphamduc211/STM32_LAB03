
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002c54  08002c54  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c54  08002c54  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000044  08002ca0  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002ca0  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009671  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b13  00000000  00000000  000296de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002bc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017412  00000000  00000000  0002c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2d1  00000000  00000000  00043942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d21  00000000  00000000  0004fc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002814  00000000  00000000  000d3988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c18 	.word	0x08002c18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002c18 	.word	0x08002c18

0800014c <automaticRun>:
 *      Author: ADMIN
 */

#include "FSM_automatic.h"
#include "time_set.h"
void automaticRun(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4bac      	ldr	r3, [pc, #688]	; (8000404 <automaticRun+0x2b8>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b03      	cmp	r3, #3
 8000158:	f200 8132 	bhi.w	80003c0 <automaticRun+0x274>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <automaticRun+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000175 	.word	0x08000175
 8000168:	080001e3 	.word	0x080001e3
 800016c:	0800033b 	.word	0x0800033b
 8000170:	080002bd 	.word	0x080002bd
	case INIT:
		if(1){
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port , LED_RED1_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	2108      	movs	r1, #8
 8000178:	48a3      	ldr	r0, [pc, #652]	; (8000408 <automaticRun+0x2bc>)
 800017a:	f001 fd38 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin, GPIO_PIN_RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	2120      	movs	r1, #32
 8000182:	48a1      	ldr	r0, [pc, #644]	; (8000408 <automaticRun+0x2bc>)
 8000184:	f001 fd33 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port , LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	489e      	ldr	r0, [pc, #632]	; (8000408 <automaticRun+0x2bc>)
 800018e:	f001 fd2e 	bl	8001bee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED2_GPIO_Port , LED_RED2_Pin, GPIO_PIN_RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	2140      	movs	r1, #64	; 0x40
 8000196:	489c      	ldr	r0, [pc, #624]	; (8000408 <automaticRun+0x2bc>)
 8000198:	f001 fd29 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a2:	4899      	ldr	r0, [pc, #612]	; (8000408 <automaticRun+0x2bc>)
 80001a4:	f001 fd23 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port , LED_GREEN2_Pin, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2180      	movs	r1, #128	; 0x80
 80001ac:	4896      	ldr	r0, [pc, #600]	; (8000408 <automaticRun+0x2bc>)
 80001ae:	f001 fd1e 	bl	8001bee <HAL_GPIO_WritePin>
			status = AUTO_RED;
 80001b2:	4b94      	ldr	r3, [pc, #592]	; (8000404 <automaticRun+0x2b8>)
 80001b4:	2202      	movs	r2, #2
 80001b6:	601a      	str	r2, [r3, #0]
			button_flag[0] = 0;
 80001b8:	4b94      	ldr	r3, [pc, #592]	; (800040c <automaticRun+0x2c0>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 80001be:	4b93      	ldr	r3, [pc, #588]	; (800040c <automaticRun+0x2c0>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	605a      	str	r2, [r3, #4]
			button_flag[2] = 0;
 80001c4:	4b91      	ldr	r3, [pc, #580]	; (800040c <automaticRun+0x2c0>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	609a      	str	r2, [r3, #8]
			counter0 = redDura;
 80001ca:	4b91      	ldr	r3, [pc, #580]	; (8000410 <automaticRun+0x2c4>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a91      	ldr	r2, [pc, #580]	; (8000414 <automaticRun+0x2c8>)
 80001d0:	6013      	str	r3, [r2, #0]
			counter1 = greenDura;
 80001d2:	4b91      	ldr	r3, [pc, #580]	; (8000418 <automaticRun+0x2cc>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a91      	ldr	r2, [pc, #580]	; (800041c <automaticRun+0x2d0>)
 80001d8:	6013      	str	r3, [r2, #0]
			countdownEnable = ENABLE;
 80001da:	4b91      	ldr	r3, [pc, #580]	; (8000420 <automaticRun+0x2d4>)
 80001dc:	2201      	movs	r2, #1
 80001de:	601a      	str	r2, [r3, #0]
	}
	break;
 80001e0:	e0f5      	b.n	80003ce <automaticRun+0x282>
	case AUTO_RED:
		if(counter0 == yellowDura) {
 80001e2:	4b8c      	ldr	r3, [pc, #560]	; (8000414 <automaticRun+0x2c8>)
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	4b8f      	ldr	r3, [pc, #572]	; (8000424 <automaticRun+0x2d8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d122      	bne.n	8000234 <automaticRun+0xe8>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port , LED_RED2_Pin, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2140      	movs	r1, #64	; 0x40
 80001f2:	4885      	ldr	r0, [pc, #532]	; (8000408 <automaticRun+0x2bc>)
 80001f4:	f001 fcfb 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fe:	4882      	ldr	r0, [pc, #520]	; (8000408 <automaticRun+0x2bc>)
 8000200:	f001 fcf5 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port , LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2180      	movs	r1, #128	; 0x80
 8000208:	487f      	ldr	r0, [pc, #508]	; (8000408 <automaticRun+0x2bc>)
 800020a:	f001 fcf0 	bl	8001bee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port , LED_RED1_Pin, GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	2108      	movs	r1, #8
 8000212:	487d      	ldr	r0, [pc, #500]	; (8000408 <automaticRun+0x2bc>)
 8000214:	f001 fceb 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2120      	movs	r1, #32
 800021c:	487a      	ldr	r0, [pc, #488]	; (8000408 <automaticRun+0x2bc>)
 800021e:	f001 fce6 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port , LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2110      	movs	r1, #16
 8000226:	4878      	ldr	r0, [pc, #480]	; (8000408 <automaticRun+0x2bc>)
 8000228:	f001 fce1 	bl	8001bee <HAL_GPIO_WritePin>
			counter1 = yellowDura;
 800022c:	4b7d      	ldr	r3, [pc, #500]	; (8000424 <automaticRun+0x2d8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a7a      	ldr	r2, [pc, #488]	; (800041c <automaticRun+0x2d0>)
 8000232:	6013      	str	r3, [r2, #0]
		}
		if(counter0 == 0) {
 8000234:	4b77      	ldr	r3, [pc, #476]	; (8000414 <automaticRun+0x2c8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d129      	bne.n	8000290 <automaticRun+0x144>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port , LED_RED1_Pin, GPIO_PIN_RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	2108      	movs	r1, #8
 8000240:	4871      	ldr	r0, [pc, #452]	; (8000408 <automaticRun+0x2bc>)
 8000242:	f001 fcd4 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	2120      	movs	r1, #32
 800024a:	486f      	ldr	r0, [pc, #444]	; (8000408 <automaticRun+0x2bc>)
 800024c:	f001 fccf 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port , LED_GREEN1_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2110      	movs	r1, #16
 8000254:	486c      	ldr	r0, [pc, #432]	; (8000408 <automaticRun+0x2bc>)
 8000256:	f001 fcca 	bl	8001bee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED2_GPIO_Port , LED_RED2_Pin, GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	2140      	movs	r1, #64	; 0x40
 800025e:	486a      	ldr	r0, [pc, #424]	; (8000408 <automaticRun+0x2bc>)
 8000260:	f001 fcc5 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026a:	4867      	ldr	r0, [pc, #412]	; (8000408 <automaticRun+0x2bc>)
 800026c:	f001 fcbf 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port , LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	2180      	movs	r1, #128	; 0x80
 8000274:	4864      	ldr	r0, [pc, #400]	; (8000408 <automaticRun+0x2bc>)
 8000276:	f001 fcba 	bl	8001bee <HAL_GPIO_WritePin>

			counter0 = greenDura;
 800027a:	4b67      	ldr	r3, [pc, #412]	; (8000418 <automaticRun+0x2cc>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a65      	ldr	r2, [pc, #404]	; (8000414 <automaticRun+0x2c8>)
 8000280:	6013      	str	r3, [r2, #0]
			counter1 = redDura;
 8000282:	4b63      	ldr	r3, [pc, #396]	; (8000410 <automaticRun+0x2c4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a65      	ldr	r2, [pc, #404]	; (800041c <automaticRun+0x2d0>)
 8000288:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN;
 800028a:	4b5e      	ldr	r3, [pc, #376]	; (8000404 <automaticRun+0x2b8>)
 800028c:	2204      	movs	r2, #4
 800028e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1) == 1){
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fc55 	bl	8000b40 <isButtonPressed>
 8000296:	4603      	mov	r3, r0
 8000298:	2b01      	cmp	r3, #1
 800029a:	f040 8093 	bne.w	80003c4 <automaticRun+0x278>
			status = MAN_INIT;
 800029e:	4b59      	ldr	r3, [pc, #356]	; (8000404 <automaticRun+0x2b8>)
 80002a0:	220b      	movs	r2, #11
 80002a2:	601a      	str	r2, [r3, #0]
			countdown_save[0] = counter0;
 80002a4:	4b5b      	ldr	r3, [pc, #364]	; (8000414 <automaticRun+0x2c8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a5f      	ldr	r2, [pc, #380]	; (8000428 <automaticRun+0x2dc>)
 80002aa:	6013      	str	r3, [r2, #0]
			countdown_save[1] = counter1;
 80002ac:	4b5b      	ldr	r3, [pc, #364]	; (800041c <automaticRun+0x2d0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a5d      	ldr	r2, [pc, #372]	; (8000428 <automaticRun+0x2dc>)
 80002b2:	6053      	str	r3, [r2, #4]
			countdownEnable = DISABLE;//DISABLE COUTDOWN
 80002b4:	4b5a      	ldr	r3, [pc, #360]	; (8000420 <automaticRun+0x2d4>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
		}
		break;
 80002ba:	e083      	b.n	80003c4 <automaticRun+0x278>
	case AUTO_GREEN:
		if(counter0 == 0) {
 80002bc:	4b55      	ldr	r3, [pc, #340]	; (8000414 <automaticRun+0x2c8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d125      	bne.n	8000310 <automaticRun+0x1c4>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port , LED_RED1_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2108      	movs	r1, #8
 80002c8:	484f      	ldr	r0, [pc, #316]	; (8000408 <automaticRun+0x2bc>)
 80002ca:	f001 fc90 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin, GPIO_PIN_SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2120      	movs	r1, #32
 80002d2:	484d      	ldr	r0, [pc, #308]	; (8000408 <automaticRun+0x2bc>)
 80002d4:	f001 fc8b 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port , LED_GREEN1_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2110      	movs	r1, #16
 80002dc:	484a      	ldr	r0, [pc, #296]	; (8000408 <automaticRun+0x2bc>)
 80002de:	f001 fc86 	bl	8001bee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED2_GPIO_Port , LED_RED2_Pin, GPIO_PIN_SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2140      	movs	r1, #64	; 0x40
 80002e6:	4848      	ldr	r0, [pc, #288]	; (8000408 <automaticRun+0x2bc>)
 80002e8:	f001 fc81 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f2:	4845      	ldr	r0, [pc, #276]	; (8000408 <automaticRun+0x2bc>)
 80002f4:	f001 fc7b 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port , LED_GREEN2_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2180      	movs	r1, #128	; 0x80
 80002fc:	4842      	ldr	r0, [pc, #264]	; (8000408 <automaticRun+0x2bc>)
 80002fe:	f001 fc76 	bl	8001bee <HAL_GPIO_WritePin>
			counter0 = yellowDura;
 8000302:	4b48      	ldr	r3, [pc, #288]	; (8000424 <automaticRun+0x2d8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a43      	ldr	r2, [pc, #268]	; (8000414 <automaticRun+0x2c8>)
 8000308:	6013      	str	r3, [r2, #0]
			status = AUTO_AMBER;
 800030a:	4b3e      	ldr	r3, [pc, #248]	; (8000404 <automaticRun+0x2b8>)
 800030c:	2203      	movs	r2, #3
 800030e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1) == 1){
 8000310:	2001      	movs	r0, #1
 8000312:	f000 fc15 	bl	8000b40 <isButtonPressed>
 8000316:	4603      	mov	r3, r0
 8000318:	2b01      	cmp	r3, #1
 800031a:	d155      	bne.n	80003c8 <automaticRun+0x27c>
			status = MAN_INIT;
 800031c:	4b39      	ldr	r3, [pc, #228]	; (8000404 <automaticRun+0x2b8>)
 800031e:	220b      	movs	r2, #11
 8000320:	601a      	str	r2, [r3, #0]
			countdown_save[0] = counter0;
 8000322:	4b3c      	ldr	r3, [pc, #240]	; (8000414 <automaticRun+0x2c8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a40      	ldr	r2, [pc, #256]	; (8000428 <automaticRun+0x2dc>)
 8000328:	6013      	str	r3, [r2, #0]
			countdown_save[1] = counter1;
 800032a:	4b3c      	ldr	r3, [pc, #240]	; (800041c <automaticRun+0x2d0>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a3e      	ldr	r2, [pc, #248]	; (8000428 <automaticRun+0x2dc>)
 8000330:	6053      	str	r3, [r2, #4]
			countdownEnable = DISABLE;
 8000332:	4b3b      	ldr	r3, [pc, #236]	; (8000420 <automaticRun+0x2d4>)
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
		}
		break;
 8000338:	e046      	b.n	80003c8 <automaticRun+0x27c>
	case AUTO_AMBER:
		if(counter0 == 0) {
 800033a:	4b36      	ldr	r3, [pc, #216]	; (8000414 <automaticRun+0x2c8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d129      	bne.n	8000396 <automaticRun+0x24a>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port , LED_RED1_Pin, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	2108      	movs	r1, #8
 8000346:	4830      	ldr	r0, [pc, #192]	; (8000408 <automaticRun+0x2bc>)
 8000348:	f001 fc51 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	2120      	movs	r1, #32
 8000350:	482d      	ldr	r0, [pc, #180]	; (8000408 <automaticRun+0x2bc>)
 8000352:	f001 fc4c 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port , LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2110      	movs	r1, #16
 800035a:	482b      	ldr	r0, [pc, #172]	; (8000408 <automaticRun+0x2bc>)
 800035c:	f001 fc47 	bl	8001bee <HAL_GPIO_WritePin>


			HAL_GPIO_WritePin(LED_RED2_GPIO_Port , LED_RED2_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	4828      	ldr	r0, [pc, #160]	; (8000408 <automaticRun+0x2bc>)
 8000366:	f001 fc42 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000370:	4825      	ldr	r0, [pc, #148]	; (8000408 <automaticRun+0x2bc>)
 8000372:	f001 fc3c 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port , LED_GREEN2_Pin, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	4823      	ldr	r0, [pc, #140]	; (8000408 <automaticRun+0x2bc>)
 800037c:	f001 fc37 	bl	8001bee <HAL_GPIO_WritePin>

			counter0 = redDura;
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <automaticRun+0x2c4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a23      	ldr	r2, [pc, #140]	; (8000414 <automaticRun+0x2c8>)
 8000386:	6013      	str	r3, [r2, #0]
			counter1 = greenDura;
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <automaticRun+0x2cc>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a23      	ldr	r2, [pc, #140]	; (800041c <automaticRun+0x2d0>)
 800038e:	6013      	str	r3, [r2, #0]
			status = AUTO_RED;
 8000390:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <automaticRun+0x2b8>)
 8000392:	2202      	movs	r2, #2
 8000394:	601a      	str	r2, [r3, #0]

		}
		if(isButtonPressed(1) == 1){
 8000396:	2001      	movs	r0, #1
 8000398:	f000 fbd2 	bl	8000b40 <isButtonPressed>
 800039c:	4603      	mov	r3, r0
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d114      	bne.n	80003cc <automaticRun+0x280>
			status = MAN_INIT;
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <automaticRun+0x2b8>)
 80003a4:	220b      	movs	r2, #11
 80003a6:	601a      	str	r2, [r3, #0]
			countdown_save[0] = counter0;
 80003a8:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <automaticRun+0x2c8>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1e      	ldr	r2, [pc, #120]	; (8000428 <automaticRun+0x2dc>)
 80003ae:	6013      	str	r3, [r2, #0]
			countdown_save[1] = counter1;
 80003b0:	4b1a      	ldr	r3, [pc, #104]	; (800041c <automaticRun+0x2d0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1c      	ldr	r2, [pc, #112]	; (8000428 <automaticRun+0x2dc>)
 80003b6:	6053      	str	r3, [r2, #4]
			countdownEnable = DISABLE;
 80003b8:	4b19      	ldr	r3, [pc, #100]	; (8000420 <automaticRun+0x2d4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
		}
		break;
 80003be:	e005      	b.n	80003cc <automaticRun+0x280>
	default:
		break;
 80003c0:	bf00      	nop
 80003c2:	e004      	b.n	80003ce <automaticRun+0x282>
		break;
 80003c4:	bf00      	nop
 80003c6:	e002      	b.n	80003ce <automaticRun+0x282>
		break;
 80003c8:	bf00      	nop
 80003ca:	e000      	b.n	80003ce <automaticRun+0x282>
		break;
 80003cc:	bf00      	nop
	}
	if(timer_flag[1] == 1 && countdownEnable)
 80003ce:	4b17      	ldr	r3, [pc, #92]	; (800042c <automaticRun+0x2e0>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d113      	bne.n	80003fe <automaticRun+0x2b2>
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <automaticRun+0x2d4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d00f      	beq.n	80003fe <automaticRun+0x2b2>
	{
		counter0 --;
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <automaticRun+0x2c8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <automaticRun+0x2c8>)
 80003e6:	6013      	str	r3, [r2, #0]
		counter1 --;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <automaticRun+0x2d0>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	4a0b      	ldr	r2, [pc, #44]	; (800041c <automaticRun+0x2d0>)
 80003f0:	6013      	str	r3, [r2, #0]
		setTimer(1, timer_dura[1]);
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <automaticRun+0x2e4>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	4619      	mov	r1, r3
 80003f8:	2001      	movs	r0, #1
 80003fa:	f001 f885 	bl	8001508 <setTimer>
	}
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000070 	.word	0x20000070
 8000408:	40010800 	.word	0x40010800
 800040c:	20000098 	.word	0x20000098
 8000410:	20000000 	.word	0x20000000
 8000414:	20000078 	.word	0x20000078
 8000418:	20000004 	.word	0x20000004
 800041c:	2000007c 	.word	0x2000007c
 8000420:	2000000c 	.word	0x2000000c
 8000424:	20000008 	.word	0x20000008
 8000428:	200000a4 	.word	0x200000a4
 800042c:	20000108 	.word	0x20000108
 8000430:	20000014 	.word	0x20000014

08000434 <manual_run>:
#include "FSM_manual.h"
void init_manual(){

}

void manual_run(){
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	switch(status){
 8000438:	4ba3      	ldr	r3, [pc, #652]	; (80006c8 <manual_run+0x294>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3b0b      	subs	r3, #11
 800043e:	2b03      	cmp	r3, #3
 8000440:	f200 819e 	bhi.w	8000780 <manual_run+0x34c>
 8000444:	a201      	add	r2, pc, #4	; (adr r2, 800044c <manual_run+0x18>)
 8000446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044a:	bf00      	nop
 800044c:	0800045d 	.word	0x0800045d
 8000450:	0800049f 	.word	0x0800049f
 8000454:	08000663 	.word	0x08000663
 8000458:	0800058b 	.word	0x0800058b
	case MAN_INIT:
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port , LED_RED2_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2140      	movs	r1, #64	; 0x40
 8000460:	489a      	ldr	r0, [pc, #616]	; (80006cc <manual_run+0x298>)
 8000462:	f001 fbc4 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	4897      	ldr	r0, [pc, #604]	; (80006cc <manual_run+0x298>)
 800046e:	f001 fbbe 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port , LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	4895      	ldr	r0, [pc, #596]	; (80006cc <manual_run+0x298>)
 8000478:	f001 fbb9 	bl	8001bee <HAL_GPIO_WritePin>
		status = MAN_RED;
 800047c:	4b92      	ldr	r3, [pc, #584]	; (80006c8 <manual_run+0x294>)
 800047e:	220c      	movs	r2, #12
 8000480:	601a      	str	r2, [r3, #0]
		counter0 = redDura;
 8000482:	4b93      	ldr	r3, [pc, #588]	; (80006d0 <manual_run+0x29c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a93      	ldr	r2, [pc, #588]	; (80006d4 <manual_run+0x2a0>)
 8000488:	6013      	str	r3, [r2, #0]
		counter1 = MAN_RED % 10;
 800048a:	4b93      	ldr	r3, [pc, #588]	; (80006d8 <manual_run+0x2a4>)
 800048c:	2202      	movs	r2, #2
 800048e:	601a      	str	r2, [r3, #0]
		setTimer(2, timer_dura[2]);
 8000490:	4b92      	ldr	r3, [pc, #584]	; (80006dc <manual_run+0x2a8>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4619      	mov	r1, r3
 8000496:	2002      	movs	r0, #2
 8000498:	f001 f836 	bl	8001508 <setTimer>
		break;
 800049c:	e170      	b.n	8000780 <manual_run+0x34c>
	case MAN_RED:
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2120      	movs	r1, #32
 80004a2:	488a      	ldr	r0, [pc, #552]	; (80006cc <manual_run+0x298>)
 80004a4:	f001 fba3 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2110      	movs	r1, #16
 80004ac:	4887      	ldr	r0, [pc, #540]	; (80006cc <manual_run+0x298>)
 80004ae:	f001 fb9e 	bl	8001bee <HAL_GPIO_WritePin>
		if(isButtonPressed(1))
 80004b2:	2001      	movs	r0, #1
 80004b4:	f000 fb44 	bl	8000b40 <isButtonPressed>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00f      	beq.n	80004de <manual_run+0xaa>
		{
			status = MAN_GREEN;
 80004be:	4b82      	ldr	r3, [pc, #520]	; (80006c8 <manual_run+0x294>)
 80004c0:	220d      	movs	r2, #13
 80004c2:	601a      	str	r2, [r3, #0]
			counter0 = greenDura;
 80004c4:	4b86      	ldr	r3, [pc, #536]	; (80006e0 <manual_run+0x2ac>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a82      	ldr	r2, [pc, #520]	; (80006d4 <manual_run+0x2a0>)
 80004ca:	6013      	str	r3, [r2, #0]
			counter1 = MAN_GREEN % 10;
 80004cc:	4b82      	ldr	r3, [pc, #520]	; (80006d8 <manual_run+0x2a4>)
 80004ce:	2203      	movs	r2, #3
 80004d0:	601a      	str	r2, [r3, #0]
			setTimer(2, timer_dura[2]);
 80004d2:	4b82      	ldr	r3, [pc, #520]	; (80006dc <manual_run+0x2a8>)
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	4619      	mov	r1, r3
 80004d8:	2002      	movs	r0, #2
 80004da:	f001 f815 	bl	8001508 <setTimer>
		}
		if(isButtonPressed(2))
 80004de:	2002      	movs	r0, #2
 80004e0:	f000 fb2e 	bl	8000b40 <isButtonPressed>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00b      	beq.n	8000502 <manual_run+0xce>
		{
			counter0 ++;
 80004ea:	4b7a      	ldr	r3, [pc, #488]	; (80006d4 <manual_run+0x2a0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	4a78      	ldr	r2, [pc, #480]	; (80006d4 <manual_run+0x2a0>)
 80004f2:	6013      	str	r3, [r2, #0]
			setTimer(2, timer_dura[2]);
 80004f4:	4b79      	ldr	r3, [pc, #484]	; (80006dc <manual_run+0x2a8>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	4619      	mov	r1, r3
 80004fa:	2002      	movs	r0, #2
 80004fc:	f001 f804 	bl	8001508 <setTimer>
 8000500:	e014      	b.n	800052c <manual_run+0xf8>
		}
		else if(isButtonHold(2))
 8000502:	2002      	movs	r0, #2
 8000504:	f000 fb38 	bl	8000b78 <isButtonHold>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00e      	beq.n	800052c <manual_run+0xf8>
		{
			if(timer_flag[3] == 1){
 800050e:	4b75      	ldr	r3, [pc, #468]	; (80006e4 <manual_run+0x2b0>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d10a      	bne.n	800052c <manual_run+0xf8>
				counter0 ++;
 8000516:	4b6f      	ldr	r3, [pc, #444]	; (80006d4 <manual_run+0x2a0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	4a6d      	ldr	r2, [pc, #436]	; (80006d4 <manual_run+0x2a0>)
 800051e:	6013      	str	r3, [r2, #0]
				setTimer(3, timer_dura[3]);
 8000520:	4b6e      	ldr	r3, [pc, #440]	; (80006dc <manual_run+0x2a8>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	4619      	mov	r1, r3
 8000526:	2003      	movs	r0, #3
 8000528:	f000 ffee 	bl	8001508 <setTimer>
			}
		}
		if(isButtonPressed(3)){
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fb07 	bl	8000b40 <isButtonPressed>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d018      	beq.n	800056a <manual_run+0x136>
			//ENABLE COUTDOWN FOR AUTO_TRAFFIC_LIGHT
			greenDura += counter0 - redDura;
 8000538:	4b66      	ldr	r3, [pc, #408]	; (80006d4 <manual_run+0x2a0>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b64      	ldr	r3, [pc, #400]	; (80006d0 <manual_run+0x29c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	1ad2      	subs	r2, r2, r3
 8000542:	4b67      	ldr	r3, [pc, #412]	; (80006e0 <manual_run+0x2ac>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4413      	add	r3, r2
 8000548:	4a65      	ldr	r2, [pc, #404]	; (80006e0 <manual_run+0x2ac>)
 800054a:	6013      	str	r3, [r2, #0]
			redDura = counter0;
 800054c:	4b61      	ldr	r3, [pc, #388]	; (80006d4 <manual_run+0x2a0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a5f      	ldr	r2, [pc, #380]	; (80006d0 <manual_run+0x29c>)
 8000552:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2108      	movs	r1, #8
 8000558:	485c      	ldr	r0, [pc, #368]	; (80006cc <manual_run+0x298>)
 800055a:	f001 fb48 	bl	8001bee <HAL_GPIO_WritePin>
			setTimer(2,timer_dura[4]);
 800055e:	4b5f      	ldr	r3, [pc, #380]	; (80006dc <manual_run+0x2a8>)
 8000560:	691b      	ldr	r3, [r3, #16]
 8000562:	4619      	mov	r1, r3
 8000564:	2002      	movs	r0, #2
 8000566:	f000 ffcf 	bl	8001508 <setTimer>
		}
		if(timer_flag[2] == 1){
 800056a:	4b5e      	ldr	r3, [pc, #376]	; (80006e4 <manual_run+0x2b0>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	2b01      	cmp	r3, #1
 8000570:	f040 8101 	bne.w	8000776 <manual_run+0x342>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000574:	2108      	movs	r1, #8
 8000576:	4855      	ldr	r0, [pc, #340]	; (80006cc <manual_run+0x298>)
 8000578:	f001 fb51 	bl	8001c1e <HAL_GPIO_TogglePin>
			setTimer(2, timer_dura[2]);
 800057c:	4b57      	ldr	r3, [pc, #348]	; (80006dc <manual_run+0x2a8>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4619      	mov	r1, r3
 8000582:	2002      	movs	r0, #2
 8000584:	f000 ffc0 	bl	8001508 <setTimer>
		}

		break;
 8000588:	e0f5      	b.n	8000776 <manual_run+0x342>
	case MAN_AMBER:
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	484f      	ldr	r0, [pc, #316]	; (80006cc <manual_run+0x298>)
 8000590:	f001 fb2d 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	484c      	ldr	r0, [pc, #304]	; (80006cc <manual_run+0x298>)
 800059a:	f001 fb28 	bl	8001bee <HAL_GPIO_WritePin>
		if(isButtonPressed(1)){
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 face 	bl	8000b40 <isButtonPressed>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <manual_run+0x182>
			status = INIT;
 80005aa:	4b47      	ldr	r3, [pc, #284]	; (80006c8 <manual_run+0x294>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
			//ENABLE COUTDOWN FOR AUTO_TRAFFIC_LIGHT
			countdownEnable = ENABLE;
 80005b0:	4b4d      	ldr	r3, [pc, #308]	; (80006e8 <manual_run+0x2b4>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2))
 80005b6:	2002      	movs	r0, #2
 80005b8:	f000 fac2 	bl	8000b40 <isButtonPressed>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00b      	beq.n	80005da <manual_run+0x1a6>
		{
			counter0 ++;
 80005c2:	4b44      	ldr	r3, [pc, #272]	; (80006d4 <manual_run+0x2a0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a42      	ldr	r2, [pc, #264]	; (80006d4 <manual_run+0x2a0>)
 80005ca:	6013      	str	r3, [r2, #0]
			setTimer(2, timer_dura[2]);
 80005cc:	4b43      	ldr	r3, [pc, #268]	; (80006dc <manual_run+0x2a8>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4619      	mov	r1, r3
 80005d2:	2002      	movs	r0, #2
 80005d4:	f000 ff98 	bl	8001508 <setTimer>
 80005d8:	e014      	b.n	8000604 <manual_run+0x1d0>
		}
		else if(isButtonHold(2))
 80005da:	2002      	movs	r0, #2
 80005dc:	f000 facc 	bl	8000b78 <isButtonHold>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d00e      	beq.n	8000604 <manual_run+0x1d0>
		{
			if(timer_flag[3] == 1){
 80005e6:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <manual_run+0x2b0>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10a      	bne.n	8000604 <manual_run+0x1d0>
				counter0 ++;
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <manual_run+0x2a0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a37      	ldr	r2, [pc, #220]	; (80006d4 <manual_run+0x2a0>)
 80005f6:	6013      	str	r3, [r2, #0]
				setTimer(3, timer_dura[3]);
 80005f8:	4b38      	ldr	r3, [pc, #224]	; (80006dc <manual_run+0x2a8>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2003      	movs	r0, #3
 8000600:	f000 ff82 	bl	8001508 <setTimer>
			}
		}
		if(isButtonPressed(3)){
 8000604:	2003      	movs	r0, #3
 8000606:	f000 fa9b 	bl	8000b40 <isButtonPressed>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d018      	beq.n	8000642 <manual_run+0x20e>
			redDura += counter0 - yellowDura;
 8000610:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <manual_run+0x2a0>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b35      	ldr	r3, [pc, #212]	; (80006ec <manual_run+0x2b8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1ad2      	subs	r2, r2, r3
 800061a:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <manual_run+0x29c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <manual_run+0x29c>)
 8000622:	6013      	str	r3, [r2, #0]
			yellowDura = counter0;
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <manual_run+0x2a0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a30      	ldr	r2, [pc, #192]	; (80006ec <manual_run+0x2b8>)
 800062a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2120      	movs	r1, #32
 8000630:	4826      	ldr	r0, [pc, #152]	; (80006cc <manual_run+0x298>)
 8000632:	f001 fadc 	bl	8001bee <HAL_GPIO_WritePin>
			setTimer(2,timer_dura[4]);
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <manual_run+0x2a8>)
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	4619      	mov	r1, r3
 800063c:	2002      	movs	r0, #2
 800063e:	f000 ff63 	bl	8001508 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <manual_run+0x2b0>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	2b01      	cmp	r3, #1
 8000648:	f040 8097 	bne.w	800077a <manual_run+0x346>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 800064c:	2120      	movs	r1, #32
 800064e:	481f      	ldr	r0, [pc, #124]	; (80006cc <manual_run+0x298>)
 8000650:	f001 fae5 	bl	8001c1e <HAL_GPIO_TogglePin>
			setTimer(2, timer_dura[2]);
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <manual_run+0x2a8>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4619      	mov	r1, r3
 800065a:	2002      	movs	r0, #2
 800065c:	f000 ff54 	bl	8001508 <setTimer>
		}
		break;
 8000660:	e08b      	b.n	800077a <manual_run+0x346>
	case MAN_GREEN:
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2108      	movs	r1, #8
 8000666:	4819      	ldr	r0, [pc, #100]	; (80006cc <manual_run+0x298>)
 8000668:	f001 fac1 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2120      	movs	r1, #32
 8000670:	4816      	ldr	r0, [pc, #88]	; (80006cc <manual_run+0x298>)
 8000672:	f001 fabc 	bl	8001bee <HAL_GPIO_WritePin>

		if(isButtonPressed(1)){
 8000676:	2001      	movs	r0, #1
 8000678:	f000 fa62 	bl	8000b40 <isButtonPressed>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00f      	beq.n	80006a2 <manual_run+0x26e>
			status = MAN_AMBER;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <manual_run+0x294>)
 8000684:	220e      	movs	r2, #14
 8000686:	601a      	str	r2, [r3, #0]
			counter0 = yellowDura;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <manual_run+0x2b8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <manual_run+0x2a0>)
 800068e:	6013      	str	r3, [r2, #0]
			counter1 = MAN_AMBER % 10;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <manual_run+0x2a4>)
 8000692:	2204      	movs	r2, #4
 8000694:	601a      	str	r2, [r3, #0]
			setTimer(2, timer_dura[2]);
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <manual_run+0x2a8>)
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	4619      	mov	r1, r3
 800069c:	2002      	movs	r0, #2
 800069e:	f000 ff33 	bl	8001508 <setTimer>
		}
		if(isButtonPressed(2))
 80006a2:	2002      	movs	r0, #2
 80006a4:	f000 fa4c 	bl	8000b40 <isButtonPressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d020      	beq.n	80006f0 <manual_run+0x2bc>
		{
			counter0 ++;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <manual_run+0x2a0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <manual_run+0x2a0>)
 80006b6:	6013      	str	r3, [r2, #0]
			setTimer(2, timer_dura[2]);
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <manual_run+0x2a8>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	4619      	mov	r1, r3
 80006be:	2002      	movs	r0, #2
 80006c0:	f000 ff22 	bl	8001508 <setTimer>
 80006c4:	e029      	b.n	800071a <manual_run+0x2e6>
 80006c6:	bf00      	nop
 80006c8:	20000070 	.word	0x20000070
 80006cc:	40010800 	.word	0x40010800
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000078 	.word	0x20000078
 80006d8:	2000007c 	.word	0x2000007c
 80006dc:	20000014 	.word	0x20000014
 80006e0:	20000004 	.word	0x20000004
 80006e4:	20000108 	.word	0x20000108
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	20000008 	.word	0x20000008
		}
		else if(isButtonHold(2))
 80006f0:	2002      	movs	r0, #2
 80006f2:	f000 fa41 	bl	8000b78 <isButtonHold>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00e      	beq.n	800071a <manual_run+0x2e6>
		{
			if(timer_flag[3] == 1){
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <manual_run+0x350>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d10a      	bne.n	800071a <manual_run+0x2e6>
				counter0 ++;
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <manual_run+0x354>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <manual_run+0x354>)
 800070c:	6013      	str	r3, [r2, #0]
				setTimer(3, timer_dura[3]);
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <manual_run+0x358>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	4619      	mov	r1, r3
 8000714:	2003      	movs	r0, #3
 8000716:	f000 fef7 	bl	8001508 <setTimer>
			}
		}
		if(isButtonPressed(3)){
 800071a:	2003      	movs	r0, #3
 800071c:	f000 fa10 	bl	8000b40 <isButtonPressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d018      	beq.n	8000758 <manual_run+0x324>
			redDura += counter0 - greenDura;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <manual_run+0x354>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <manual_run+0x35c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1ad2      	subs	r2, r2, r3
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <manual_run+0x360>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4413      	add	r3, r2
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <manual_run+0x360>)
 8000738:	6013      	str	r3, [r2, #0]
			greenDura = counter0;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <manual_run+0x354>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <manual_run+0x35c>)
 8000740:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2110      	movs	r1, #16
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <manual_run+0x364>)
 8000748:	f001 fa51 	bl	8001bee <HAL_GPIO_WritePin>
			setTimer(2,timer_dura[4]);
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <manual_run+0x358>)
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	4619      	mov	r1, r3
 8000752:	2002      	movs	r0, #2
 8000754:	f000 fed8 	bl	8001508 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <manual_run+0x350>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10e      	bne.n	800077e <manual_run+0x34a>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000760:	2110      	movs	r1, #16
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <manual_run+0x364>)
 8000764:	f001 fa5b 	bl	8001c1e <HAL_GPIO_TogglePin>
			setTimer(2, timer_dura[2]);
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <manual_run+0x358>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4619      	mov	r1, r3
 800076e:	2002      	movs	r0, #2
 8000770:	f000 feca 	bl	8001508 <setTimer>
		}
		break;
 8000774:	e003      	b.n	800077e <manual_run+0x34a>
		break;
 8000776:	bf00      	nop
 8000778:	e002      	b.n	8000780 <manual_run+0x34c>
		break;
 800077a:	bf00      	nop
 800077c:	e000      	b.n	8000780 <manual_run+0x34c>
		break;
 800077e:	bf00      	nop
	}
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000108 	.word	0x20000108
 8000788:	20000078 	.word	0x20000078
 800078c:	20000014 	.word	0x20000014
 8000790:	20000004 	.word	0x20000004
 8000794:	20000000 	.word	0x20000000
 8000798:	40010800 	.word	0x40010800

0800079c <pressProcess>:
static GPIO_PinState buttonBounce3[BUTTON_NUM];
int button_flag[BUTTON_NUM];
int button_hold[BUTTON_NUM];
int keyPressCounter[BUTTON_NUM];
void pressProcess(int i)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <pressProcess+0x28>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2101      	movs	r1, #1
 80007aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_hold[i] = 0;
 80007ae:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <pressProcess+0x2c>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2100      	movs	r1, #0
 80007b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return;
 80007b8:	bf00      	nop
}
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000098 	.word	0x20000098
 80007c8:	2000008c 	.word	0x2000008c

080007cc <holdProcess>:
void holdProcess(int i)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	button_flag[i] = 0;
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <holdProcess+0x28>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2100      	movs	r1, #0
 80007da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_hold[i] = 1;
 80007de:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <holdProcess+0x2c>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2101      	movs	r1, #1
 80007e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return;
 80007e8:	bf00      	nop
}
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000098 	.word	0x20000098
 80007f8:	2000008c 	.word	0x2000008c

080007fc <normalProcess>:
void normalProcess(int i)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	button_flag[i] = 0;
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <normalProcess+0x28>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2100      	movs	r1, #0
 800080a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_hold[i] = 0;
 800080e:	4a06      	ldr	r2, [pc, #24]	; (8000828 <normalProcess+0x2c>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2100      	movs	r1, #0
 8000814:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return;
 8000818:	bf00      	nop
}
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000098 	.word	0x20000098
 8000828:	2000008c 	.word	0x2000008c

0800082c <buttonReading>:
 void buttonReading(){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	 for(int i = 0; i < BUTTON_NUM; i ++ ){
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	e175      	b.n	8000b24 <buttonReading+0x2f8>
		 buttonBounce1[i] = buttonBounce2[i];
 8000838:	4a9f      	ldr	r2, [pc, #636]	; (8000ab8 <buttonReading+0x28c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	7819      	ldrb	r1, [r3, #0]
 8000840:	4a9e      	ldr	r2, [pc, #632]	; (8000abc <buttonReading+0x290>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	460a      	mov	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
		 buttonBounce2[i] = buttonBuffer[i];
 800084a:	4a9d      	ldr	r2, [pc, #628]	; (8000ac0 <buttonReading+0x294>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4413      	add	r3, r2
 8000850:	7819      	ldrb	r1, [r3, #0]
 8000852:	4a99      	ldr	r2, [pc, #612]	; (8000ab8 <buttonReading+0x28c>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	460a      	mov	r2, r1
 800085a:	701a      	strb	r2, [r3, #0]
		 switch(i)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b02      	cmp	r3, #2
 8000860:	f000 80df 	beq.w	8000a22 <buttonReading+0x1f6>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b02      	cmp	r3, #2
 8000868:	f300 8152 	bgt.w	8000b10 <buttonReading+0x2e4>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d003      	beq.n	800087a <buttonReading+0x4e>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d06d      	beq.n	8000954 <buttonReading+0x128>
			 				 }
			 			 }
			 		 }
			 break;
		 default:
		 	 break;
 8000878:	e14a      	b.n	8000b10 <buttonReading+0x2e4>
			 buttonBuffer[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 800087a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087e:	4891      	ldr	r0, [pc, #580]	; (8000ac4 <buttonReading+0x298>)
 8000880:	f001 f99e 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	4619      	mov	r1, r3
 8000888:	4a8d      	ldr	r2, [pc, #564]	; (8000ac0 <buttonReading+0x294>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	460a      	mov	r2, r1
 8000890:	701a      	strb	r2, [r3, #0]
			 if((buttonBounce1[i] == buttonBounce2[i]) && (buttonBounce2[i] == buttonBuffer[i])){
 8000892:	4a8a      	ldr	r2, [pc, #552]	; (8000abc <buttonReading+0x290>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	4987      	ldr	r1, [pc, #540]	; (8000ab8 <buttonReading+0x28c>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	440b      	add	r3, r1
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	f040 8136 	bne.w	8000b14 <buttonReading+0x2e8>
 80008a8:	4a83      	ldr	r2, [pc, #524]	; (8000ab8 <buttonReading+0x28c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4983      	ldr	r1, [pc, #524]	; (8000ac0 <buttonReading+0x294>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	440b      	add	r3, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	f040 812b 	bne.w	8000b14 <buttonReading+0x2e8>
			 			 if(buttonBounce3[i] != buttonBuffer[i]){
 80008be:	4a82      	ldr	r2, [pc, #520]	; (8000ac8 <buttonReading+0x29c>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	497e      	ldr	r1, [pc, #504]	; (8000ac0 <buttonReading+0x294>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	440b      	add	r3, r1
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d021      	beq.n	8000916 <buttonReading+0xea>
			 				 buttonBounce3[i] = buttonBuffer[i];
 80008d2:	4a7b      	ldr	r2, [pc, #492]	; (8000ac0 <buttonReading+0x294>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	7819      	ldrb	r1, [r3, #0]
 80008da:	4a7b      	ldr	r2, [pc, #492]	; (8000ac8 <buttonReading+0x29c>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	460a      	mov	r2, r1
 80008e2:	701a      	strb	r2, [r3, #0]
			 				 if(buttonBuffer[i] == PRESSED_STATE){
 80008e4:	4a76      	ldr	r2, [pc, #472]	; (8000ac0 <buttonReading+0x294>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d103      	bne.n	80008f8 <buttonReading+0xcc>
			 					 pressProcess(i);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff53 	bl	800079c <pressProcess>
 80008f6:	e008      	b.n	800090a <buttonReading+0xde>
			 				 else if(buttonBuffer[i] == NORMAL_STATE)
 80008f8:	4a71      	ldr	r2, [pc, #452]	; (8000ac0 <buttonReading+0x294>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d102      	bne.n	800090a <buttonReading+0xde>
			 					 normalProcess(i);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff79 	bl	80007fc <normalProcess>
			 				 keyPressCounter[i] = AUTO_DURATION;
 800090a:	4a70      	ldr	r2, [pc, #448]	; (8000acc <buttonReading+0x2a0>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	21c8      	movs	r1, #200	; 0xc8
 8000910:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 8000914:	e0fe      	b.n	8000b14 <buttonReading+0x2e8>
			 				 keyPressCounter[i] --;
 8000916:	4a6d      	ldr	r2, [pc, #436]	; (8000acc <buttonReading+0x2a0>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091e:	1e5a      	subs	r2, r3, #1
 8000920:	496a      	ldr	r1, [pc, #424]	; (8000acc <buttonReading+0x2a0>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 				 if(keyPressCounter[i] <= 0){
 8000928:	4a68      	ldr	r2, [pc, #416]	; (8000acc <buttonReading+0x2a0>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000930:	2b00      	cmp	r3, #0
 8000932:	f300 80ef 	bgt.w	8000b14 <buttonReading+0x2e8>
			 					 if(buttonBuffer[i] == PRESSED_STATE){
 8000936:	4a62      	ldr	r2, [pc, #392]	; (8000ac0 <buttonReading+0x294>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <buttonReading+0x11c>
			 						 pressProcess(i);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff2a 	bl	800079c <pressProcess>
			 					 keyPressCounter[i] = AUTO_DURATION;
 8000948:	4a60      	ldr	r2, [pc, #384]	; (8000acc <buttonReading+0x2a0>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	21c8      	movs	r1, #200	; 0xc8
 800094e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 8000952:	e0df      	b.n	8000b14 <buttonReading+0x2e8>
			 buttonBuffer[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 8000954:	2102      	movs	r1, #2
 8000956:	485e      	ldr	r0, [pc, #376]	; (8000ad0 <buttonReading+0x2a4>)
 8000958:	f001 f932 	bl	8001bc0 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	4619      	mov	r1, r3
 8000960:	4a57      	ldr	r2, [pc, #348]	; (8000ac0 <buttonReading+0x294>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	460a      	mov	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
			 if((buttonBounce1[i] == buttonBounce2[i]) && (buttonBounce2[i] == buttonBuffer[i])){
 800096a:	4a54      	ldr	r2, [pc, #336]	; (8000abc <buttonReading+0x290>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4413      	add	r3, r2
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4951      	ldr	r1, [pc, #324]	; (8000ab8 <buttonReading+0x28c>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	440b      	add	r3, r1
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	429a      	cmp	r2, r3
 800097c:	f040 80cc 	bne.w	8000b18 <buttonReading+0x2ec>
 8000980:	4a4d      	ldr	r2, [pc, #308]	; (8000ab8 <buttonReading+0x28c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	494d      	ldr	r1, [pc, #308]	; (8000ac0 <buttonReading+0x294>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	440b      	add	r3, r1
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	429a      	cmp	r2, r3
 8000992:	f040 80c1 	bne.w	8000b18 <buttonReading+0x2ec>
			 			 if(buttonBounce3[i] != buttonBuffer[i]){
 8000996:	4a4c      	ldr	r2, [pc, #304]	; (8000ac8 <buttonReading+0x29c>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4948      	ldr	r1, [pc, #288]	; (8000ac0 <buttonReading+0x294>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	440b      	add	r3, r1
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d021      	beq.n	80009ee <buttonReading+0x1c2>
			 				 buttonBounce3[i] = buttonBuffer[i];
 80009aa:	4a45      	ldr	r2, [pc, #276]	; (8000ac0 <buttonReading+0x294>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	7819      	ldrb	r1, [r3, #0]
 80009b2:	4a45      	ldr	r2, [pc, #276]	; (8000ac8 <buttonReading+0x29c>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4413      	add	r3, r2
 80009b8:	460a      	mov	r2, r1
 80009ba:	701a      	strb	r2, [r3, #0]
			 				 if(buttonBuffer[i] == PRESSED_STATE){
 80009bc:	4a40      	ldr	r2, [pc, #256]	; (8000ac0 <buttonReading+0x294>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d103      	bne.n	80009d0 <buttonReading+0x1a4>
			 					 pressProcess(i);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fee7 	bl	800079c <pressProcess>
 80009ce:	e008      	b.n	80009e2 <buttonReading+0x1b6>
			 				 else if(buttonBuffer[i] == NORMAL_STATE)
 80009d0:	4a3b      	ldr	r2, [pc, #236]	; (8000ac0 <buttonReading+0x294>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d102      	bne.n	80009e2 <buttonReading+0x1b6>
								 normalProcess(i);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff0d 	bl	80007fc <normalProcess>
							 keyPressCounter[i] = AUTO_DURATION;
 80009e2:	4a3a      	ldr	r2, [pc, #232]	; (8000acc <buttonReading+0x2a0>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	21c8      	movs	r1, #200	; 0xc8
 80009e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 80009ec:	e094      	b.n	8000b18 <buttonReading+0x2ec>
			 				 keyPressCounter[i] --;
 80009ee:	4a37      	ldr	r2, [pc, #220]	; (8000acc <buttonReading+0x2a0>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	1e5a      	subs	r2, r3, #1
 80009f8:	4934      	ldr	r1, [pc, #208]	; (8000acc <buttonReading+0x2a0>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 				 if(keyPressCounter[i] <= 0){
 8000a00:	4a32      	ldr	r2, [pc, #200]	; (8000acc <buttonReading+0x2a0>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f300 8085 	bgt.w	8000b18 <buttonReading+0x2ec>
			 					 if(buttonBuffer[i] == PRESSED_STATE){
 8000a0e:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <buttonReading+0x294>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d17e      	bne.n	8000b18 <buttonReading+0x2ec>
			 						 holdProcess(i);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fed6 	bl	80007cc <holdProcess>
			 break;
 8000a20:	e07a      	b.n	8000b18 <buttonReading+0x2ec>
			 buttonBuffer[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000a22:	2104      	movs	r1, #4
 8000a24:	482a      	ldr	r0, [pc, #168]	; (8000ad0 <buttonReading+0x2a4>)
 8000a26:	f001 f8cb 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <buttonReading+0x294>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4413      	add	r3, r2
 8000a34:	460a      	mov	r2, r1
 8000a36:	701a      	strb	r2, [r3, #0]
			 if((buttonBounce1[i] == buttonBounce2[i]) && (buttonBounce2[i] == buttonBuffer[i])){
 8000a38:	4a20      	ldr	r2, [pc, #128]	; (8000abc <buttonReading+0x290>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	781a      	ldrb	r2, [r3, #0]
 8000a40:	491d      	ldr	r1, [pc, #116]	; (8000ab8 <buttonReading+0x28c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	440b      	add	r3, r1
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d167      	bne.n	8000b1c <buttonReading+0x2f0>
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <buttonReading+0x28c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	491a      	ldr	r1, [pc, #104]	; (8000ac0 <buttonReading+0x294>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	440b      	add	r3, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d15d      	bne.n	8000b1c <buttonReading+0x2f0>
			 			 if(buttonBounce3[i] != buttonBuffer[i]){
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <buttonReading+0x29c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	4915      	ldr	r1, [pc, #84]	; (8000ac0 <buttonReading+0x294>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d02f      	beq.n	8000ad4 <buttonReading+0x2a8>
			 				 buttonBounce3[i] = buttonBuffer[i];
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <buttonReading+0x294>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	7819      	ldrb	r1, [r3, #0]
 8000a7c:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <buttonReading+0x29c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	460a      	mov	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
			 				 if(buttonBuffer[i] == PRESSED_STATE){
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <buttonReading+0x294>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d103      	bne.n	8000a9a <buttonReading+0x26e>
			 					 pressProcess(i);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fe82 	bl	800079c <pressProcess>
 8000a98:	e008      	b.n	8000aac <buttonReading+0x280>
			 				 else if(buttonBuffer[i] == NORMAL_STATE)
 8000a9a:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <buttonReading+0x294>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d102      	bne.n	8000aac <buttonReading+0x280>
								 normalProcess(i);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fea8 	bl	80007fc <normalProcess>
							 keyPressCounter[i] = AUTO_DURATION;
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <buttonReading+0x2a0>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	21c8      	movs	r1, #200	; 0xc8
 8000ab2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 8000ab6:	e031      	b.n	8000b1c <buttonReading+0x2f0>
 8000ab8:	20000068 	.word	0x20000068
 8000abc:	20000064 	.word	0x20000064
 8000ac0:	20000060 	.word	0x20000060
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	2000006c 	.word	0x2000006c
 8000acc:	20000080 	.word	0x20000080
 8000ad0:	40010800 	.word	0x40010800
			 				 keyPressCounter[i] --;
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <buttonReading+0x30c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000adc:	1e5a      	subs	r2, r3, #1
 8000ade:	4916      	ldr	r1, [pc, #88]	; (8000b38 <buttonReading+0x30c>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 				 if(keyPressCounter[i] <= 0){
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <buttonReading+0x30c>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	dc14      	bgt.n	8000b1c <buttonReading+0x2f0>
			 					 if(buttonBuffer[i] == PRESSED_STATE){
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <buttonReading+0x310>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <buttonReading+0x2d8>
			 						 pressProcess(i);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fe4c 	bl	800079c <pressProcess>
			 					 keyPressCounter[i] = AUTO_DURATION;
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <buttonReading+0x30c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	21c8      	movs	r1, #200	; 0xc8
 8000b0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 8000b0e:	e005      	b.n	8000b1c <buttonReading+0x2f0>
		 	 break;
 8000b10:	bf00      	nop
 8000b12:	e004      	b.n	8000b1e <buttonReading+0x2f2>
			 break;
 8000b14:	bf00      	nop
 8000b16:	e002      	b.n	8000b1e <buttonReading+0x2f2>
			 break;
 8000b18:	bf00      	nop
 8000b1a:	e000      	b.n	8000b1e <buttonReading+0x2f2>
			 break;
 8000b1c:	bf00      	nop
	 for(int i = 0; i < BUTTON_NUM; i ++ ){
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3301      	adds	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	f77f ae86 	ble.w	8000838 <buttonReading+0xc>
		 }
	 }
 }
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000080 	.word	0x20000080
 8000b3c:	20000060 	.word	0x20000060

08000b40 <isButtonPressed>:
//BUTTON INDEX COUNT FROM 1
 int isButtonPressed(int index){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	 if(button_flag[index - 1] == 1){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <isButtonPressed+0x34>)
 8000b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d107      	bne.n	8000b66 <isButtonPressed+0x26>
		 button_flag[index - 1] = 0;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <isButtonPressed+0x34>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 return 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <isButtonPressed+0x28>
	 }
	 return 0;
 8000b66:	2300      	movs	r3, #0
 }
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000098 	.word	0x20000098

08000b78 <isButtonHold>:
 int isButtonHold(int index){
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	 if(button_hold[index - 1] == 1){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <isButtonHold+0x34>)
 8000b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d107      	bne.n	8000b9e <isButtonHold+0x26>
		 button_hold[index - 1] = 0;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	4a06      	ldr	r2, [pc, #24]	; (8000bac <isButtonHold+0x34>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 return 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <isButtonHold+0x28>
	 }
	 return 0;
 8000b9e:	2300      	movs	r3, #0
 }
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000008c 	.word	0x2000008c

08000bb0 <display7SEG>:
int countdownEnable = 1;
int counter0 = 0;
int counter1 = 0;
int countdown_save[NUM_COUNTDOWN];

void display7SEG(int num){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b09      	cmp	r3, #9
 8000bbc:	f200 81c8 	bhi.w	8000f50 <display7SEG+0x3a0>
 8000bc0:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <display7SEG+0x18>)
 8000bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc6:	bf00      	nop
 8000bc8:	08000bf1 	.word	0x08000bf1
 8000bcc:	08000c47 	.word	0x08000c47
 8000bd0:	08000c9d 	.word	0x08000c9d
 8000bd4:	08000cf3 	.word	0x08000cf3
 8000bd8:	08000d49 	.word	0x08000d49
 8000bdc:	08000d9f 	.word	0x08000d9f
 8000be0:	08000e4b 	.word	0x08000e4b
 8000be4:	08000df5 	.word	0x08000df5
 8000be8:	08000ea1 	.word	0x08000ea1
 8000bec:	08000ef7 	.word	0x08000ef7
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf6:	48d5      	ldr	r0, [pc, #852]	; (8000f4c <display7SEG+0x39c>)
 8000bf8:	f000 fff9 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c02:	48d2      	ldr	r0, [pc, #840]	; (8000f4c <display7SEG+0x39c>)
 8000c04:	f000 fff3 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0e:	48cf      	ldr	r0, [pc, #828]	; (8000f4c <display7SEG+0x39c>)
 8000c10:	f000 ffed 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1a:	48cc      	ldr	r0, [pc, #816]	; (8000f4c <display7SEG+0x39c>)
 8000c1c:	f000 ffe7 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c26:	48c9      	ldr	r0, [pc, #804]	; (8000f4c <display7SEG+0x39c>)
 8000c28:	f000 ffe1 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c32:	48c6      	ldr	r0, [pc, #792]	; (8000f4c <display7SEG+0x39c>)
 8000c34:	f000 ffdb 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3e:	48c3      	ldr	r0, [pc, #780]	; (8000f4c <display7SEG+0x39c>)
 8000c40:	f000 ffd5 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000c44:	e1af      	b.n	8000fa6 <display7SEG+0x3f6>
	case 1:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4c:	48bf      	ldr	r0, [pc, #764]	; (8000f4c <display7SEG+0x39c>)
 8000c4e:	f000 ffce 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c58:	48bc      	ldr	r0, [pc, #752]	; (8000f4c <display7SEG+0x39c>)
 8000c5a:	f000 ffc8 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	48b9      	ldr	r0, [pc, #740]	; (8000f4c <display7SEG+0x39c>)
 8000c66:	f000 ffc2 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c70:	48b6      	ldr	r0, [pc, #728]	; (8000f4c <display7SEG+0x39c>)
 8000c72:	f000 ffbc 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7c:	48b3      	ldr	r0, [pc, #716]	; (8000f4c <display7SEG+0x39c>)
 8000c7e:	f000 ffb6 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c88:	48b0      	ldr	r0, [pc, #704]	; (8000f4c <display7SEG+0x39c>)
 8000c8a:	f000 ffb0 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c94:	48ad      	ldr	r0, [pc, #692]	; (8000f4c <display7SEG+0x39c>)
 8000c96:	f000 ffaa 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000c9a:	e184      	b.n	8000fa6 <display7SEG+0x3f6>
	case 2:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca2:	48aa      	ldr	r0, [pc, #680]	; (8000f4c <display7SEG+0x39c>)
 8000ca4:	f000 ffa3 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	48a7      	ldr	r0, [pc, #668]	; (8000f4c <display7SEG+0x39c>)
 8000cb0:	f000 ff9d 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	48a4      	ldr	r0, [pc, #656]	; (8000f4c <display7SEG+0x39c>)
 8000cbc:	f000 ff97 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc6:	48a1      	ldr	r0, [pc, #644]	; (8000f4c <display7SEG+0x39c>)
 8000cc8:	f000 ff91 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd2:	489e      	ldr	r0, [pc, #632]	; (8000f4c <display7SEG+0x39c>)
 8000cd4:	f000 ff8b 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cde:	489b      	ldr	r0, [pc, #620]	; (8000f4c <display7SEG+0x39c>)
 8000ce0:	f000 ff85 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cea:	4898      	ldr	r0, [pc, #608]	; (8000f4c <display7SEG+0x39c>)
 8000cec:	f000 ff7f 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000cf0:	e159      	b.n	8000fa6 <display7SEG+0x3f6>
	case 3:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf8:	4894      	ldr	r0, [pc, #592]	; (8000f4c <display7SEG+0x39c>)
 8000cfa:	f000 ff78 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d04:	4891      	ldr	r0, [pc, #580]	; (8000f4c <display7SEG+0x39c>)
 8000d06:	f000 ff72 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d10:	488e      	ldr	r0, [pc, #568]	; (8000f4c <display7SEG+0x39c>)
 8000d12:	f000 ff6c 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1c:	488b      	ldr	r0, [pc, #556]	; (8000f4c <display7SEG+0x39c>)
 8000d1e:	f000 ff66 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d28:	4888      	ldr	r0, [pc, #544]	; (8000f4c <display7SEG+0x39c>)
 8000d2a:	f000 ff60 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d34:	4885      	ldr	r0, [pc, #532]	; (8000f4c <display7SEG+0x39c>)
 8000d36:	f000 ff5a 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d40:	4882      	ldr	r0, [pc, #520]	; (8000f4c <display7SEG+0x39c>)
 8000d42:	f000 ff54 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000d46:	e12e      	b.n	8000fa6 <display7SEG+0x3f6>
	case 4:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4e:	487f      	ldr	r0, [pc, #508]	; (8000f4c <display7SEG+0x39c>)
 8000d50:	f000 ff4d 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5a:	487c      	ldr	r0, [pc, #496]	; (8000f4c <display7SEG+0x39c>)
 8000d5c:	f000 ff47 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d66:	4879      	ldr	r0, [pc, #484]	; (8000f4c <display7SEG+0x39c>)
 8000d68:	f000 ff41 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d72:	4876      	ldr	r0, [pc, #472]	; (8000f4c <display7SEG+0x39c>)
 8000d74:	f000 ff3b 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7e:	4873      	ldr	r0, [pc, #460]	; (8000f4c <display7SEG+0x39c>)
 8000d80:	f000 ff35 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8a:	4870      	ldr	r0, [pc, #448]	; (8000f4c <display7SEG+0x39c>)
 8000d8c:	f000 ff2f 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d96:	486d      	ldr	r0, [pc, #436]	; (8000f4c <display7SEG+0x39c>)
 8000d98:	f000 ff29 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000d9c:	e103      	b.n	8000fa6 <display7SEG+0x3f6>
	case 5:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da4:	4869      	ldr	r0, [pc, #420]	; (8000f4c <display7SEG+0x39c>)
 8000da6:	f000 ff22 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db0:	4866      	ldr	r0, [pc, #408]	; (8000f4c <display7SEG+0x39c>)
 8000db2:	f000 ff1c 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbc:	4863      	ldr	r0, [pc, #396]	; (8000f4c <display7SEG+0x39c>)
 8000dbe:	f000 ff16 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc8:	4860      	ldr	r0, [pc, #384]	; (8000f4c <display7SEG+0x39c>)
 8000dca:	f000 ff10 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd4:	485d      	ldr	r0, [pc, #372]	; (8000f4c <display7SEG+0x39c>)
 8000dd6:	f000 ff0a 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de0:	485a      	ldr	r0, [pc, #360]	; (8000f4c <display7SEG+0x39c>)
 8000de2:	f000 ff04 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dec:	4857      	ldr	r0, [pc, #348]	; (8000f4c <display7SEG+0x39c>)
 8000dee:	f000 fefe 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000df2:	e0d8      	b.n	8000fa6 <display7SEG+0x3f6>
	case 7:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfa:	4854      	ldr	r0, [pc, #336]	; (8000f4c <display7SEG+0x39c>)
 8000dfc:	f000 fef7 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e06:	4851      	ldr	r0, [pc, #324]	; (8000f4c <display7SEG+0x39c>)
 8000e08:	f000 fef1 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e12:	484e      	ldr	r0, [pc, #312]	; (8000f4c <display7SEG+0x39c>)
 8000e14:	f000 feeb 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1e:	484b      	ldr	r0, [pc, #300]	; (8000f4c <display7SEG+0x39c>)
 8000e20:	f000 fee5 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2a:	4848      	ldr	r0, [pc, #288]	; (8000f4c <display7SEG+0x39c>)
 8000e2c:	f000 fedf 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e36:	4845      	ldr	r0, [pc, #276]	; (8000f4c <display7SEG+0x39c>)
 8000e38:	f000 fed9 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e42:	4842      	ldr	r0, [pc, #264]	; (8000f4c <display7SEG+0x39c>)
 8000e44:	f000 fed3 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000e48:	e0ad      	b.n	8000fa6 <display7SEG+0x3f6>
	case 6:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e50:	483e      	ldr	r0, [pc, #248]	; (8000f4c <display7SEG+0x39c>)
 8000e52:	f000 fecc 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5c:	483b      	ldr	r0, [pc, #236]	; (8000f4c <display7SEG+0x39c>)
 8000e5e:	f000 fec6 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e68:	4838      	ldr	r0, [pc, #224]	; (8000f4c <display7SEG+0x39c>)
 8000e6a:	f000 fec0 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e74:	4835      	ldr	r0, [pc, #212]	; (8000f4c <display7SEG+0x39c>)
 8000e76:	f000 feba 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e80:	4832      	ldr	r0, [pc, #200]	; (8000f4c <display7SEG+0x39c>)
 8000e82:	f000 feb4 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8c:	482f      	ldr	r0, [pc, #188]	; (8000f4c <display7SEG+0x39c>)
 8000e8e:	f000 feae 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e98:	482c      	ldr	r0, [pc, #176]	; (8000f4c <display7SEG+0x39c>)
 8000e9a:	f000 fea8 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000e9e:	e082      	b.n	8000fa6 <display7SEG+0x3f6>
	case 8:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea6:	4829      	ldr	r0, [pc, #164]	; (8000f4c <display7SEG+0x39c>)
 8000ea8:	f000 fea1 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb2:	4826      	ldr	r0, [pc, #152]	; (8000f4c <display7SEG+0x39c>)
 8000eb4:	f000 fe9b 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebe:	4823      	ldr	r0, [pc, #140]	; (8000f4c <display7SEG+0x39c>)
 8000ec0:	f000 fe95 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eca:	4820      	ldr	r0, [pc, #128]	; (8000f4c <display7SEG+0x39c>)
 8000ecc:	f000 fe8f 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed6:	481d      	ldr	r0, [pc, #116]	; (8000f4c <display7SEG+0x39c>)
 8000ed8:	f000 fe89 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee2:	481a      	ldr	r0, [pc, #104]	; (8000f4c <display7SEG+0x39c>)
 8000ee4:	f000 fe83 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eee:	4817      	ldr	r0, [pc, #92]	; (8000f4c <display7SEG+0x39c>)
 8000ef0:	f000 fe7d 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000ef4:	e057      	b.n	8000fa6 <display7SEG+0x3f6>
	case 9:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efc:	4813      	ldr	r0, [pc, #76]	; (8000f4c <display7SEG+0x39c>)
 8000efe:	f000 fe76 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <display7SEG+0x39c>)
 8000f0a:	f000 fe70 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <display7SEG+0x39c>)
 8000f16:	f000 fe6a 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <display7SEG+0x39c>)
 8000f22:	f000 fe64 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <display7SEG+0x39c>)
 8000f2e:	f000 fe5e 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <display7SEG+0x39c>)
 8000f3a:	f000 fe58 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f44:	4801      	ldr	r0, [pc, #4]	; (8000f4c <display7SEG+0x39c>)
 8000f46:	f000 fe52 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000f4a:	e02c      	b.n	8000fa6 <display7SEG+0x3f6>
 8000f4c:	40010800 	.word	0x40010800
	default:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port , SEG_A_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f56:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <display7SEG+0x400>)
 8000f58:	f000 fe49 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port , SEG_B_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f62:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <display7SEG+0x400>)
 8000f64:	f000 fe43 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port , SEG_C_Pin, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6e:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <display7SEG+0x400>)
 8000f70:	f000 fe3d 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port , SEG_D_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <display7SEG+0x400>)
 8000f7c:	f000 fe37 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port , SEG_E_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f86:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <display7SEG+0x400>)
 8000f88:	f000 fe31 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port , SEG_F_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <display7SEG+0x400>)
 8000f94:	f000 fe2b 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port , SEG_G_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <display7SEG+0x400>)
 8000fa0:	f000 fe25 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8000fa4:	bf00      	nop

	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40010800 	.word	0x40010800

08000fb4 <displayNum>:
void displayNum(int mode)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	switch(index7SEG)
 8000fbc:	4b5a      	ldr	r3, [pc, #360]	; (8001128 <displayNum+0x174>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	f200 8095 	bhi.w	80010f0 <displayNum+0x13c>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <displayNum+0x18>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000fdd 	.word	0x08000fdd
 8000fd0:	0800101d 	.word	0x0800101d
 8000fd4:	08001067 	.word	0x08001067
 8000fd8:	080010a7 	.word	0x080010a7
	{
	case 0:
		display7SEG(counter0 / 10);
 8000fdc:	4b53      	ldr	r3, [pc, #332]	; (800112c <displayNum+0x178>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a53      	ldr	r2, [pc, #332]	; (8001130 <displayNum+0x17c>)
 8000fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe6:	1092      	asrs	r2, r2, #2
 8000fe8:	17db      	asrs	r3, r3, #31
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fddf 	bl	8000bb0 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	484f      	ldr	r0, [pc, #316]	; (8001134 <displayNum+0x180>)
 8000ff8:	f000 fdf9 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2102      	movs	r1, #2
 8001000:	484c      	ldr	r0, [pc, #304]	; (8001134 <displayNum+0x180>)
 8001002:	f000 fdf4 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2104      	movs	r1, #4
 800100a:	484a      	ldr	r0, [pc, #296]	; (8001134 <displayNum+0x180>)
 800100c:	f000 fdef 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2108      	movs	r1, #8
 8001014:	4847      	ldr	r0, [pc, #284]	; (8001134 <displayNum+0x180>)
 8001016:	f000 fdea 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 800101a:	e06a      	b.n	80010f2 <displayNum+0x13e>
	case 1:
		display7SEG(counter0 % 10);
 800101c:	4b43      	ldr	r3, [pc, #268]	; (800112c <displayNum+0x178>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b43      	ldr	r3, [pc, #268]	; (8001130 <displayNum+0x17c>)
 8001022:	fb83 1302 	smull	r1, r3, r3, r2
 8001026:	1099      	asrs	r1, r3, #2
 8001028:	17d3      	asrs	r3, r2, #31
 800102a:	1ac9      	subs	r1, r1, r3
 800102c:	460b      	mov	r3, r1
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	1ad1      	subs	r1, r2, r3
 8001036:	4608      	mov	r0, r1
 8001038:	f7ff fdba 	bl	8000bb0 <display7SEG>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2102      	movs	r1, #2
 8001040:	483c      	ldr	r0, [pc, #240]	; (8001134 <displayNum+0x180>)
 8001042:	f000 fdd4 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port , EN0_Pin , GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2101      	movs	r1, #1
 800104a:	483a      	ldr	r0, [pc, #232]	; (8001134 <displayNum+0x180>)
 800104c:	f000 fdcf 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2104      	movs	r1, #4
 8001054:	4837      	ldr	r0, [pc, #220]	; (8001134 <displayNum+0x180>)
 8001056:	f000 fdca 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	4835      	ldr	r0, [pc, #212]	; (8001134 <displayNum+0x180>)
 8001060:	f000 fdc5 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 8001064:	e045      	b.n	80010f2 <displayNum+0x13e>
	case 2:
		display7SEG(counter1 / 10);
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <displayNum+0x184>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a31      	ldr	r2, [pc, #196]	; (8001130 <displayNum+0x17c>)
 800106c:	fb82 1203 	smull	r1, r2, r2, r3
 8001070:	1092      	asrs	r2, r2, #2
 8001072:	17db      	asrs	r3, r3, #31
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fd9a 	bl	8000bb0 <display7SEG>
		HAL_GPIO_WritePin(EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	482c      	ldr	r0, [pc, #176]	; (8001134 <displayNum+0x180>)
 8001082:	f000 fdb4 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port , EN0_Pin , GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	2101      	movs	r1, #1
 800108a:	482a      	ldr	r0, [pc, #168]	; (8001134 <displayNum+0x180>)
 800108c:	f000 fdaf 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port , EN2_Pin , GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2104      	movs	r1, #4
 8001094:	4827      	ldr	r0, [pc, #156]	; (8001134 <displayNum+0x180>)
 8001096:	f000 fdaa 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2108      	movs	r1, #8
 800109e:	4825      	ldr	r0, [pc, #148]	; (8001134 <displayNum+0x180>)
 80010a0:	f000 fda5 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 80010a4:	e025      	b.n	80010f2 <displayNum+0x13e>
	case 3:
		display7SEG(counter1 % 10);
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <displayNum+0x184>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <displayNum+0x17c>)
 80010ac:	fb83 1302 	smull	r1, r3, r3, r2
 80010b0:	1099      	asrs	r1, r3, #2
 80010b2:	17d3      	asrs	r3, r2, #31
 80010b4:	1ac9      	subs	r1, r1, r3
 80010b6:	460b      	mov	r3, r1
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	1ad1      	subs	r1, r2, r3
 80010c0:	4608      	mov	r0, r1
 80010c2:	f7ff fd75 	bl	8000bb0 <display7SEG>
		HAL_GPIO_WritePin(EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2102      	movs	r1, #2
 80010ca:	481a      	ldr	r0, [pc, #104]	; (8001134 <displayNum+0x180>)
 80010cc:	f000 fd8f 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port , EN0_Pin , GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2101      	movs	r1, #1
 80010d4:	4817      	ldr	r0, [pc, #92]	; (8001134 <displayNum+0x180>)
 80010d6:	f000 fd8a 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2104      	movs	r1, #4
 80010de:	4815      	ldr	r0, [pc, #84]	; (8001134 <displayNum+0x180>)
 80010e0:	f000 fd85 	bl	8001bee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port , EN3_Pin , GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2108      	movs	r1, #8
 80010e8:	4812      	ldr	r0, [pc, #72]	; (8001134 <displayNum+0x180>)
 80010ea:	f000 fd80 	bl	8001bee <HAL_GPIO_WritePin>
		break;
 80010ee:	e000      	b.n	80010f2 <displayNum+0x13e>
	default:
		break;
 80010f0:	bf00      	nop
	}
	if(timer_flag[0] == 1)
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <displayNum+0x188>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d111      	bne.n	800111e <displayNum+0x16a>
	{
		index7SEG ++;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <displayNum+0x174>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <displayNum+0x174>)
 8001102:	6013      	str	r3, [r2, #0]
		if(index7SEG >= NUM_ENABLE) index7SEG = 0;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <displayNum+0x174>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b03      	cmp	r3, #3
 800110a:	dd02      	ble.n	8001112 <displayNum+0x15e>
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <displayNum+0x174>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
		setTimer(0, timer_dura[0]);
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <displayNum+0x18c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	2000      	movs	r0, #0
 800111a:	f000 f9f5 	bl	8001508 <setTimer>
	}
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000074 	.word	0x20000074
 800112c:	20000078 	.word	0x20000078
 8001130:	66666667 	.word	0x66666667
 8001134:	40010c00 	.word	0x40010c00
 8001138:	2000007c 	.word	0x2000007c
 800113c:	20000108 	.word	0x20000108
 8001140:	20000014 	.word	0x20000014

08001144 <initial>:
void initial(){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	setTimer(0, timer_dura[0]);
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <initial+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f9da 	bl	8001508 <setTimer>
	setTimer(1, timer_dura[1]);
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <initial+0x40>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4619      	mov	r1, r3
 800115a:	2001      	movs	r0, #1
 800115c:	f000 f9d4 	bl	8001508 <setTimer>
	setTimer(2, timer_dura[2]);
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <initial+0x40>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4619      	mov	r1, r3
 8001166:	2002      	movs	r0, #2
 8001168:	f000 f9ce 	bl	8001508 <setTimer>
	setTimer(3, timer_dura[3]);
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <initial+0x40>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4619      	mov	r1, r3
 8001172:	2003      	movs	r0, #3
 8001174:	f000 f9c8 	bl	8001508 <setTimer>
	status = INIT;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <initial+0x44>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000014 	.word	0x20000014
 8001188:	20000070 	.word	0x20000070

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f000 fa2c 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f814 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 f89a 	bl	80012d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800119c:	f000 f84c 	bl	8001238 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <main+0x30>)
 80011a2:	f001 f981 	bl	80024a8 <HAL_TIM_Base_Start_IT>
  initial();
 80011a6:	f7ff ffcd 	bl	8001144 <initial>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  automaticRun();
 80011aa:	f7fe ffcf 	bl	800014c <automaticRun>
	  displayNum(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff ff00 	bl	8000fb4 <displayNum>
	  manual_run();
 80011b4:	f7ff f93e 	bl	8000434 <manual_run>
	  automaticRun();
 80011b8:	e7f7      	b.n	80011aa <main+0x1e>
 80011ba:	bf00      	nop
 80011bc:	200000ac 	.word	0x200000ac

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b090      	sub	sp, #64	; 0x40
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	2228      	movs	r2, #40	; 0x28
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fd1a 	bl	8002c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ea:	2310      	movs	r3, #16
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fd2a 	bl	8001c50 <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001202:	f000 f8ed 	bl	80013e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f000 ff96 	bl	8002150 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800122a:	f000 f8d9 	bl	80013e0 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3740      	adds	r7, #64	; 0x40
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_TIM2_Init+0x94>)
 8001256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_TIM2_Init+0x94>)
 800125e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_TIM2_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_TIM2_Init+0x94>)
 800126c:	2209      	movs	r2, #9
 800126e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_TIM2_Init+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_TIM2_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <MX_TIM2_Init+0x94>)
 800127e:	f001 f8c3 	bl	8002408 <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001288:	f000 f8aa 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001290:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_TIM2_Init+0x94>)
 800129a:	f001 fa41 	bl	8002720 <HAL_TIM_ConfigClockSource>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012a4:	f000 f89c 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_TIM2_Init+0x94>)
 80012b6:	f001 fc19 	bl	8002aec <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012c0:	f000 f88e 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000ac 	.word	0x200000ac

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <MX_GPIO_Init+0xe8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <MX_GPIO_Init+0xe8>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <MX_GPIO_Init+0xe8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <MX_GPIO_Init+0xe8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a2d      	ldr	r2, [pc, #180]	; (80013b8 <MX_GPIO_Init+0xe8>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_GPIO_Init+0xe8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_GPIO_Init+0xe8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <MX_GPIO_Init+0xe8>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_GPIO_Init+0xe8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 800132c:	2200      	movs	r2, #0
 800132e:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8001332:	4822      	ldr	r0, [pc, #136]	; (80013bc <MX_GPIO_Init+0xec>)
 8001334:	f000 fc5b 	bl	8001bee <HAL_GPIO_WritePin>
                          |LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG_A_Pin|SEG_B_Pin
                          |SEG_C_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin
                          |SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	210f      	movs	r1, #15
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <MX_GPIO_Init+0xf0>)
 800133e:	f000 fc56 	bl	8001bee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button1_Pin */
  GPIO_InitStruct.Pin = button1_Pin;
 8001342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	481b      	ldr	r0, [pc, #108]	; (80013c4 <MX_GPIO_Init+0xf4>)
 8001358:	f000 fab8 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button2_Pin|button3_Pin;
 800135c:	2306      	movs	r3, #6
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001364:	2301      	movs	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <MX_GPIO_Init+0xec>)
 8001370:	f000 faac 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
                           LED_GREEN2_Pin LED_YELLOW2_Pin SEG_A_Pin SEG_B_Pin
                           SEG_C_Pin SEG_D_Pin SEG_E_Pin SEG_F_Pin
                           SEG_G_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 8001374:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001378:	613b      	str	r3, [r7, #16]
                          |LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG_A_Pin|SEG_B_Pin
                          |SEG_C_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin
                          |SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2302      	movs	r3, #2
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4619      	mov	r1, r3
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <MX_GPIO_Init+0xec>)
 800138e:	f000 fa9d 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8001392:	230f      	movs	r3, #15
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2302      	movs	r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_GPIO_Init+0xf0>)
 80013aa:	f000 fa8f 	bl	80018cc <HAL_GPIO_Init>

}
 80013ae:	bf00      	nop
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	40011000 	.word	0x40011000

080013c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	runTimer();
 80013d0:	f000 f8ba 	bl	8001548 <runTimer>
	buttonReading () ;
 80013d4:	f7ff fa2a 	bl	800082c <buttonReading>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_MspInit+0x5c>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_MspInit+0x5c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6193      	str	r3, [r2, #24]
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_MspInit+0x5c>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_MspInit+0x5c>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_MspInit+0x5c>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_MspInit+0x5c>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_MspInit+0x60>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_MspInit+0x60>)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000

08001450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001460:	d113      	bne.n	800148a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_TIM_Base_MspInit+0x44>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_TIM_Base_MspInit+0x44>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_TIM_Base_MspInit+0x44>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	201c      	movs	r0, #28
 8001480:	f000 f9ed 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001484:	201c      	movs	r0, #28
 8001486:	f000 fa06 	bl	8001896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014de:	f000 f8cb 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <TIM2_IRQHandler+0x10>)
 80014ee:	f001 f827 	bl	8002540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200000ac 	.word	0x200000ac

080014fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <setTimer>:

int timer_counter[NUM_TIMER];
int timer_flag[NUM_TIMER];
int timer_dura[10] = {50, 1000, 250, 250, INT_MAX};

void setTimer(int index, int duration){
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <setTimer+0x34>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2100      	movs	r1, #0
 8001518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = duration/ 10;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <setTimer+0x38>)
 8001520:	fb82 1203 	smull	r1, r2, r2, r3
 8001524:	1092      	asrs	r2, r2, #2
 8001526:	17db      	asrs	r3, r3, #31
 8001528:	1ad2      	subs	r2, r2, r3
 800152a:	4906      	ldr	r1, [pc, #24]	; (8001544 <setTimer+0x3c>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000108 	.word	0x20000108
 8001540:	66666667 	.word	0x66666667
 8001544:	200000f4 	.word	0x200000f4

08001548 <runTimer>:
void runTimer(){
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_TIMER; i++){
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	e017      	b.n	8001584 <runTimer+0x3c>
		if(timer_counter[i] <= 0){
 8001554:	4a10      	ldr	r2, [pc, #64]	; (8001598 <runTimer+0x50>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	2b00      	cmp	r3, #0
 800155e:	dc05      	bgt.n	800156c <runTimer+0x24>
			timer_flag[i] = 1;
 8001560:	4a0e      	ldr	r2, [pc, #56]	; (800159c <runTimer+0x54>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2101      	movs	r1, #1
 8001566:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800156a:	e008      	b.n	800157e <runTimer+0x36>
		}
		else{
			timer_counter[i] --;
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <runTimer+0x50>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <runTimer+0x50>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_TIMER; i++){
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3301      	adds	r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b04      	cmp	r3, #4
 8001588:	dde4      	ble.n	8001554 <runTimer+0xc>
		}
	}
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200000f4 	.word	0x200000f4
 800159c:	20000108 	.word	0x20000108

080015a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a0:	f7ff ffac 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015a6:	490c      	ldr	r1, [pc, #48]	; (80015d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015bc:	4c09      	ldr	r4, [pc, #36]	; (80015e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ca:	f001 faf9 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ce:	f7ff fddd 	bl	800118c <main>
  bx lr
 80015d2:	4770      	bx	lr
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80015dc:	08002c5c 	.word	0x08002c5c
  ldr r2, =_sbss
 80015e0:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80015e4:	20000120 	.word	0x20000120

080015e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC1_2_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x28>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x28>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f923 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fef0 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f93b 	bl	80018b2 <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f000 f903 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000010 	.word	0x20000010
 8001670:	20000040 	.word	0x20000040
 8001674:	2000003c 	.word	0x2000003c

08001678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_IncTick+0x1c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_IncTick+0x20>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_IncTick+0x20>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000040 	.word	0x20000040
 8001698:	2000011c 	.word	0x2000011c

0800169c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b02      	ldr	r3, [pc, #8]	; (80016ac <HAL_GetTick+0x10>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	2000011c 	.word	0x2000011c

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4906      	ldr	r1, [pc, #24]	; (8001748 <__NVIC_EnableIRQ+0x34>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff90 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff2d 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff42 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff90 	bl	80017a0 <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5f 	bl	800174c <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff35 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa2 	bl	8001804 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	e148      	b.n	8001b72 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e0:	2201      	movs	r2, #1
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8137 	bne.w	8001b6c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4aa3      	ldr	r2, [pc, #652]	; (8001b90 <HAL_GPIO_Init+0x2c4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d05e      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001908:	4aa1      	ldr	r2, [pc, #644]	; (8001b90 <HAL_GPIO_Init+0x2c4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d875      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800190e:	4aa1      	ldr	r2, [pc, #644]	; (8001b94 <HAL_GPIO_Init+0x2c8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d058      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001914:	4a9f      	ldr	r2, [pc, #636]	; (8001b94 <HAL_GPIO_Init+0x2c8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d86f      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800191a:	4a9f      	ldr	r2, [pc, #636]	; (8001b98 <HAL_GPIO_Init+0x2cc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d052      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001920:	4a9d      	ldr	r2, [pc, #628]	; (8001b98 <HAL_GPIO_Init+0x2cc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d869      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001926:	4a9d      	ldr	r2, [pc, #628]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d04c      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 800192c:	4a9b      	ldr	r2, [pc, #620]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d863      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001932:	4a9b      	ldr	r2, [pc, #620]	; (8001ba0 <HAL_GPIO_Init+0x2d4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d046      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001938:	4a99      	ldr	r2, [pc, #612]	; (8001ba0 <HAL_GPIO_Init+0x2d4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d85d      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800193e:	2b12      	cmp	r3, #18
 8001940:	d82a      	bhi.n	8001998 <HAL_GPIO_Init+0xcc>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d859      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001946:	a201      	add	r2, pc, #4	; (adr r2, 800194c <HAL_GPIO_Init+0x80>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	080019c7 	.word	0x080019c7
 8001950:	080019a1 	.word	0x080019a1
 8001954:	080019b3 	.word	0x080019b3
 8001958:	080019f5 	.word	0x080019f5
 800195c:	080019fb 	.word	0x080019fb
 8001960:	080019fb 	.word	0x080019fb
 8001964:	080019fb 	.word	0x080019fb
 8001968:	080019fb 	.word	0x080019fb
 800196c:	080019fb 	.word	0x080019fb
 8001970:	080019fb 	.word	0x080019fb
 8001974:	080019fb 	.word	0x080019fb
 8001978:	080019fb 	.word	0x080019fb
 800197c:	080019fb 	.word	0x080019fb
 8001980:	080019fb 	.word	0x080019fb
 8001984:	080019fb 	.word	0x080019fb
 8001988:	080019fb 	.word	0x080019fb
 800198c:	080019fb 	.word	0x080019fb
 8001990:	080019a9 	.word	0x080019a9
 8001994:	080019bd 	.word	0x080019bd
 8001998:	4a82      	ldr	r2, [pc, #520]	; (8001ba4 <HAL_GPIO_Init+0x2d8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800199e:	e02c      	b.n	80019fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e029      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	3304      	adds	r3, #4
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e024      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	3308      	adds	r3, #8
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e01f      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	330c      	adds	r3, #12
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e01a      	b.n	80019fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ce:	2304      	movs	r3, #4
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e013      	b.n	80019fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	611a      	str	r2, [r3, #16]
          break;
 80019e6:	e009      	b.n	80019fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e8:	2308      	movs	r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	615a      	str	r2, [r3, #20]
          break;
 80019f2:	e003      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x130>
          break;
 80019fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d801      	bhi.n	8001a06 <HAL_GPIO_Init+0x13a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_Init+0x13e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2bff      	cmp	r3, #255	; 0xff
 8001a10:	d802      	bhi.n	8001a18 <HAL_GPIO_Init+0x14c>
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	e002      	b.n	8001a1e <HAL_GPIO_Init+0x152>
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	3b08      	subs	r3, #8
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	210f      	movs	r1, #15
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	6a39      	ldr	r1, [r7, #32]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8090 	beq.w	8001b6c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4c:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_GPIO_Init+0x2dc>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_GPIO_Init+0x2dc>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_GPIO_Init+0x2dc>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a64:	4a51      	ldr	r2, [pc, #324]	; (8001bac <HAL_GPIO_Init+0x2e0>)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <HAL_GPIO_Init+0x2e4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00d      	beq.n	8001aac <HAL_GPIO_Init+0x1e0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_GPIO_Init+0x2e8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d007      	beq.n	8001aa8 <HAL_GPIO_Init+0x1dc>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a47      	ldr	r2, [pc, #284]	; (8001bb8 <HAL_GPIO_Init+0x2ec>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_GPIO_Init+0x1d8>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e004      	b.n	8001aae <HAL_GPIO_Init+0x1e2>
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e002      	b.n	8001aae <HAL_GPIO_Init+0x1e2>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_GPIO_Init+0x1e2>
 8001aac:	2300      	movs	r3, #0
 8001aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab0:	f002 0203 	and.w	r2, r2, #3
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	4093      	lsls	r3, r2
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001abe:	493b      	ldr	r1, [pc, #236]	; (8001bac <HAL_GPIO_Init+0x2e0>)
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad8:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	4937      	ldr	r1, [pc, #220]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4933      	ldr	r1, [pc, #204]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b00:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	492d      	ldr	r1, [pc, #180]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4929      	ldr	r1, [pc, #164]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4923      	ldr	r1, [pc, #140]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	491f      	ldr	r1, [pc, #124]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4919      	ldr	r1, [pc, #100]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4915      	ldr	r1, [pc, #84]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	3301      	adds	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f47f aeaf 	bne.w	80018e0 <HAL_GPIO_Init+0x14>
  }
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	372c      	adds	r7, #44	; 0x2c
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	10320000 	.word	0x10320000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	e001      	b.n	8001be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	807b      	strh	r3, [r7, #2]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bfe:	787b      	ldrb	r3, [r7, #1]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c0a:	e003      	b.n	8001c14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	041a      	lsls	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	611a      	str	r2, [r3, #16]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c30:	887a      	ldrh	r2, [r7, #2]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	041a      	lsls	r2, r3, #16
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	400b      	ands	r3, r1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e26c      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8087 	beq.w	8001d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c70:	4b92      	ldr	r3, [pc, #584]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d00c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c7c:	4b8f      	ldr	r3, [pc, #572]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d112      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e>
 8001c88:	4b8c      	ldr	r3, [pc, #560]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d10b      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c96:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d06c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x12c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d168      	bne.n	8001d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e246      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x76>
 8001cb8:	4b80      	ldr	r3, [pc, #512]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a7f      	ldr	r2, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e02e      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x98>
 8001cce:	4b7b      	ldr	r3, [pc, #492]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7a      	ldr	r2, [pc, #488]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b78      	ldr	r3, [pc, #480]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a77      	ldr	r2, [pc, #476]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e01d      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0xbc>
 8001cf2:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a71      	ldr	r2, [pc, #452]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6e      	ldr	r2, [pc, #440]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	4b6b      	ldr	r3, [pc, #428]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a67      	ldr	r2, [pc, #412]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fcb6 	bl	800169c <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fcb2 	bl	800169c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1fa      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b5d      	ldr	r3, [pc, #372]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe4>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fca2 	bl	800169c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fc9e 	bl	800169c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1e6      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x10c>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d063      	beq.n	8001e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d11c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x18c>
 8001da2:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x176>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e1ba      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4939      	ldr	r1, [pc, #228]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	e03a      	b.n	8001e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_RCC_OscConfig+0x270>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fc57 	bl	800169c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff fc53 	bl	800169c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e19b      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4927      	ldr	r1, [pc, #156]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <HAL_RCC_OscConfig+0x270>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fc36 	bl	800169c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff fc32 	bl	800169c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e17a      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d03a      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d019      	beq.n	8001e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x274>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fc16 	bl	800169c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fc12 	bl	800169c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e15a      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f000 fa9a 	bl	80023cc <RCC_Delay>
 8001e98:	e01c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fbfc 	bl	800169c <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea6:	e00f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fbf8 	bl	800169c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d908      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e140      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	42420000 	.word	0x42420000
 8001ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	4b9e      	ldr	r3, [pc, #632]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1e9      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a6 	beq.w	800202e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee6:	4b97      	ldr	r3, [pc, #604]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10d      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b94      	ldr	r3, [pc, #592]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a93      	ldr	r2, [pc, #588]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b91      	ldr	r3, [pc, #580]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b8e      	ldr	r3, [pc, #568]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d118      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a8a      	ldr	r2, [pc, #552]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fbb9 	bl	800169c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7ff fbb5 	bl	800169c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0fd      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b81      	ldr	r3, [pc, #516]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x312>
 8001f54:	4b7b      	ldr	r3, [pc, #492]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a7a      	ldr	r2, [pc, #488]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	e02d      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x334>
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a75      	ldr	r2, [pc, #468]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	4b73      	ldr	r3, [pc, #460]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a72      	ldr	r2, [pc, #456]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	e01c      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x356>
 8001f8c:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a6c      	ldr	r2, [pc, #432]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a69      	ldr	r2, [pc, #420]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	e00b      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a66      	ldr	r2, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b64      	ldr	r3, [pc, #400]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a63      	ldr	r2, [pc, #396]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d015      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fb69 	bl	800169c <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7ff fb65 	bl	800169c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0ab      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCC_OscConfig+0x37e>
 8001ff0:	e014      	b.n	800201c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fb53 	bl	800169c <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fb4f 	bl	800169c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e095      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ee      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a47      	ldr	r2, [pc, #284]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8081 	beq.w	800213a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b08      	cmp	r3, #8
 8002042:	d061      	beq.n	8002108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d146      	bne.n	80020da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204c:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_OscConfig+0x4fc>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fb23 	bl	800169c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7ff fb1f 	bl	800169c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e067      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d108      	bne.n	8002094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	492d      	ldr	r1, [pc, #180]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002094:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a19      	ldr	r1, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	430b      	orrs	r3, r1
 80020a6:	4927      	ldr	r1, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_OscConfig+0x4fc>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff faf3 	bl	800169c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff faef 	bl	800169c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e037      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x46a>
 80020d8:	e02f      	b.n	800213a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_RCC_OscConfig+0x4fc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fadc 	bl	800169c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff fad8 	bl	800169c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e020      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x498>
 8002106:	e018      	b.n	800213a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e013      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	429a      	cmp	r2, r3
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	42420060 	.word	0x42420060

08002150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0d0      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d910      	bls.n	8002194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b67      	ldr	r3, [pc, #412]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4965      	ldr	r1, [pc, #404]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0b8      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a52      	ldr	r2, [pc, #328]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	494d      	ldr	r1, [pc, #308]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d040      	beq.n	8002270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d115      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e07f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e073      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06b      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4936      	ldr	r1, [pc, #216]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002240:	f7ff fa2c 	bl	800169c <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7ff fa28 	bl	800169c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e053      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d210      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0207 	bic.w	r2, r3, #7
 8002286:	4922      	ldr	r1, [pc, #136]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e032      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4916      	ldr	r1, [pc, #88]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022de:	f000 f821 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	490a      	ldr	r1, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x1c8>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1cc>)
 80022f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1d0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f98a 	bl	8001618 <HAL_InitTick>

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40022000 	.word	0x40022000
 8002314:	40021000 	.word	0x40021000
 8002318:	08002c30 	.word	0x08002c30
 800231c:	20000010 	.word	0x20000010
 8002320:	2000003c 	.word	0x2000003c

08002324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d002      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x30>
 800234e:	2b08      	cmp	r3, #8
 8002350:	d003      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x36>
 8002352:	e027      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002356:	613b      	str	r3, [r7, #16]
      break;
 8002358:	e027      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	0c9b      	lsrs	r3, r3, #18
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d010      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0c5b      	lsrs	r3, r3, #17
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	4a11      	ldr	r2, [pc, #68]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002386:	fb02 f203 	mul.w	r2, r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e004      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	613b      	str	r3, [r7, #16]
      break;
 80023a2:	e002      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetSysClockFreq+0x98>)
 80023a6:	613b      	str	r3, [r7, #16]
      break;
 80023a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023aa:	693b      	ldr	r3, [r7, #16]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	007a1200 	.word	0x007a1200
 80023c0:	08002c40 	.word	0x08002c40
 80023c4:	08002c50 	.word	0x08002c50
 80023c8:	003d0900 	.word	0x003d0900

080023cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <RCC_Delay+0x34>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <RCC_Delay+0x38>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	0a5b      	lsrs	r3, r3, #9
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e8:	bf00      	nop
  }
  while (Delay --);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1e5a      	subs	r2, r3, #1
 80023ee:	60fa      	str	r2, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f9      	bne.n	80023e8 <RCC_Delay+0x1c>
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	20000010 	.word	0x20000010
 8002404:	10624dd3 	.word	0x10624dd3

08002408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e041      	b.n	800249e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff f80e 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3304      	adds	r3, #4
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f000 fa56 	bl	80028f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d001      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e035      	b.n	800252c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a16      	ldr	r2, [pc, #88]	; (8002538 <HAL_TIM_Base_Start_IT+0x90>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_TIM_Base_Start_IT+0x4e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ea:	d004      	beq.n	80024f6 <HAL_TIM_Base_Start_IT+0x4e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <HAL_TIM_Base_Start_IT+0x94>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d111      	bne.n	800251a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b06      	cmp	r3, #6
 8002506:	d010      	beq.n	800252a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	e007      	b.n	800252a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400

08002540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d020      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0202 	mvn.w	r2, #2
 8002574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f998 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f98b 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f99a 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d020      	beq.n	80025f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0204 	mvn.w	r2, #4
 80025c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f972 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 80025dc:	e005      	b.n	80025ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f965 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f974 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d020      	beq.n	800263c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01b      	beq.n	800263c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0208 	mvn.w	r2, #8
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2204      	movs	r2, #4
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f94c 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f93f 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f94e 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d020      	beq.n	8002688 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0210 	mvn.w	r2, #16
 8002658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2208      	movs	r2, #8
 800265e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f926 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f919 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f928 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0201 	mvn.w	r2, #1
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fe8e 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00c      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fa6f 	bl	8002bae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00c      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8f8 	bl	80028e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0220 	mvn.w	r2, #32
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa42 	bl	8002b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_TIM_ConfigClockSource+0x1c>
 8002738:	2302      	movs	r3, #2
 800273a:	e0b4      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x186>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800275a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002774:	d03e      	beq.n	80027f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277a:	f200 8087 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800277e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002782:	f000 8086 	beq.w	8002892 <HAL_TIM_ConfigClockSource+0x172>
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	d87f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800278c:	2b70      	cmp	r3, #112	; 0x70
 800278e:	d01a      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d87b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 8002794:	2b60      	cmp	r3, #96	; 0x60
 8002796:	d050      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x11a>
 8002798:	2b60      	cmp	r3, #96	; 0x60
 800279a:	d877      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b50      	cmp	r3, #80	; 0x50
 800279e:	d03c      	beq.n	800281a <HAL_TIM_ConfigClockSource+0xfa>
 80027a0:	2b50      	cmp	r3, #80	; 0x50
 80027a2:	d873      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d058      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x13a>
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d86f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b30      	cmp	r3, #48	; 0x30
 80027ae:	d064      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027b0:	2b30      	cmp	r3, #48	; 0x30
 80027b2:	d86b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d060      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d867      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05c      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d05a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027c4:	e062      	b.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f000 f96a 	bl	8002aae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	609a      	str	r2, [r3, #8]
      break;
 80027f2:	e04f      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f000 f953 	bl	8002aae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002816:	609a      	str	r2, [r3, #8]
      break;
 8002818:	e03c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	f000 f8ca 	bl	80029c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2150      	movs	r1, #80	; 0x50
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f921 	bl	8002a7a <TIM_ITRx_SetConfig>
      break;
 8002838:	e02c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f8e8 	bl	8002a1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2160      	movs	r1, #96	; 0x60
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f911 	bl	8002a7a <TIM_ITRx_SetConfig>
      break;
 8002858:	e01c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f8aa 	bl	80029c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2140      	movs	r1, #64	; 0x40
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f901 	bl	8002a7a <TIM_ITRx_SetConfig>
      break;
 8002878:	e00c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f000 f8f8 	bl	8002a7a <TIM_ITRx_SetConfig>
      break;
 800288a:	e003      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e000      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
	...

080028f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <TIM_Base_SetConfig+0xc0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <TIM_Base_SetConfig+0x28>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0x28>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a28      	ldr	r2, [pc, #160]	; (80029bc <TIM_Base_SetConfig+0xc4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d108      	bne.n	8002932 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <TIM_Base_SetConfig+0xc0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <TIM_Base_SetConfig+0x52>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d003      	beq.n	800294a <TIM_Base_SetConfig+0x52>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <TIM_Base_SetConfig+0xc4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d108      	bne.n	800295c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <TIM_Base_SetConfig+0xc0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d103      	bne.n	8002990 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f023 0201 	bic.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]
  }
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40000400 	.word	0x40000400

080029c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0201 	bic.w	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f023 030a 	bic.w	r3, r3, #10
 80029fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	621a      	str	r2, [r3, #32]
}
 8002a12:	bf00      	nop
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0210 	bic.w	r2, r3, #16
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	031b      	lsls	r3, r3, #12
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	621a      	str	r2, [r3, #32]
}
 8002a70:	bf00      	nop
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f043 0307 	orr.w	r3, r3, #7
 8002a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b087      	sub	sp, #28
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	021a      	lsls	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	609a      	str	r2, [r3, #8]
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e041      	b.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d009      	beq.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d004      	beq.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d10c      	bne.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40000400 	.word	0x40000400

08002b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	4d0c      	ldr	r5, [pc, #48]	; (8002bf8 <__libc_init_array+0x38>)
 8002bc6:	4c0d      	ldr	r4, [pc, #52]	; (8002bfc <__libc_init_array+0x3c>)
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	f000 f822 	bl	8002c18 <_init>
 8002bd4:	2600      	movs	r6, #0
 8002bd6:	4d0a      	ldr	r5, [pc, #40]	; (8002c00 <__libc_init_array+0x40>)
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	; (8002c04 <__libc_init_array+0x44>)
 8002bda:	1b64      	subs	r4, r4, r5
 8002bdc:	10a4      	asrs	r4, r4, #2
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08002c54 	.word	0x08002c54
 8002bfc:	08002c54 	.word	0x08002c54
 8002c00:	08002c54 	.word	0x08002c54
 8002c04:	08002c58 	.word	0x08002c58

08002c08 <memset>:
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4402      	add	r2, r0
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <memset+0xa>
 8002c10:	4770      	bx	lr
 8002c12:	f803 1b01 	strb.w	r1, [r3], #1
 8002c16:	e7f9      	b.n	8002c0c <memset+0x4>

08002c18 <_init>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	bf00      	nop
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr

08002c24 <_fini>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	bf00      	nop
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr
